
# 服务器配置
server.port=8080
# server.context-path=/demo
# server.ssl.key-store=file:///path/to/keys.jks
# server.ssl.key-store-password=pwd
# server.ssl.key-password=pwd


# thymelea模板配置
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML5
spring.thymeleaf.encoding=UTF-8
# 热部署文件，页面不产生缓存，及时更新
spring.thymeleaf.cache=false

# 热部署配置
spring.devtools.restart.enabled=true


# ************************************************************************************************************
#                                             Profiles
# ************************************************************************************************************
# spring.profiles.active=production
# spring.profiles.active=dev,hsqldb

# ************************************************************************************************************
#                                             Internationalization
# ************************************************************************************************************
# i18n see < MessageSourceProperties.java >
# spring.messages.basename=messages,config.i18n.messages
spring.messages.basename=i18n/messages
spring.messages.cache-seconds=3600
spring.messages.encoding=UTF-8
# spring.messages.fallback-to-system-locale=false


# ************************************************************************************************************
#                                             Logging
# ************************************************************************************************************
# log配置
# logging.path=~/var/logs/
# logging.file=demo.log

# logging.file.max-size=1024
# logging.file.max-history=365

# The above approach will only work for package level logging.
# Since relaxed binding always converts environment variables to lowercase,
# it’s not possible to configure logging for an individual class in this way.
# If you need to configure logging for a class, you can use the APPLICATION_JSON variable.
# level is one of TRACE, DEBUG, INFO, WARN, ERROR, FATAL, or OFF.
logging.level.root=info
logging.level.org.springframework.web=debug
logging.level.org.hibernate=error
# logging.level.root.org.springframework.security=INFO

# Spring Boot allows you to define logging groups in your Spring Environment.
logging.group.tomcat=org.apache.catalina, org.apache.coyote, org.apache.tomcat
# Once defined, you can change the level for all the loggers in the group with a single line:
# logging.level.tomcat=TRACE

# Spring Boot includes the following pre-defined logging groups that can be used out-of-the-box:
# web: org.springframework.core.codec, org.springframework.http, org.springframework.web
# sql: org.springframework.jdbc.core, org.hibernate.SQL


# ************************************************************************************************************
#                                             DataSource
# ************************************************************************************************************
# DataSource configuration is controlled by external configuration properties in < spring.datasource.* >.
# See < DataSourceProperties.java > for more of the supported options.
# spring.datasource.url=jdbc:mysql://localhost/test
# spring.datasource.username=dbuser
# spring.datasource.password=dbpass
# spring.datasource.driver-class-name=com.mysql.jdbc.Driver
## 数据库连接设置
# spring.datasource.url=jdbc:h2:file:~/.h2/DBName;AUTO_SERVER=TRUE
spring.datasource.url=jdbc:h2:mem:sample
spring.datasource.username=sa
spring.datasource.password=sa
spring.datasource.driver-class-name=org.h2.Driver

# he spring.datasource.jndi-name property can be used as an alternative to the
# spring.datasource.url,
# spring.datasource.username,
# and spring.datasource.password
# properties to access the DataSource from a specific JNDI location.
# spring.datasource.jndi-name=java:jboss/datasources/customers
# spring.datasource.jndi-name=java:/comp/env/jdbc/readingListDS

# It is also possible to fine-tune implementation-specific settings
# by using their respective prefix
# (spring.datasource.hikari.*, spring.datasource.tomcat.*, and spring.datasource.dbcp2.*).
# spring.datasource.hikari.*
# spring.datasource.tomcat.*
# spring.datasource.dbcp2.*

# Number of ms to wait before throwing an exception if no connection is available.
# spring.datasource.tomcat.max-wait=10000
# Maximum number of active connections that can be allocated from this pool at the same time.
# spring.datasource.tomcat.max-active=50
# Validate the connection before borrowing it from the pool.
# spring.datasource.tomcat.test-on-borrow=true

## 数据初始化设置
# 进行该配置后，每次启动程序，程序都会运行resources/db/schema.sql文件，对数据库的结构进行操作(DDL)。
spring.datasource.schema=classpath:database/schema.sql
# 进行该配置后，每次启动程序，程序都会运行resources/db/data.sql文件，对数据库的数据操作(DML)。
spring.datasource.data=classpath:database/data.sql

# You can customize some properties of the template by using the spring.jdbc.template.* properties
spring.jdbc.template.max-rows=500

# h2配置
# 启用SQL语句的日志记录
spring.jpa.show-sql=true
# 设置ddl模式
# spring.jpa.generate-ddl=false
# spring.jpa.hibernate.ddl-auto=none
spring.jpa.hibernate.ddl-auto=update

## h2 web console设置
# 表明使用的数据库平台是h2
spring.datasource.platform=h2
# 进行该配置后，h2 web consloe就可以在远程访问了。否则只能在本机访问。
# spring.h2.console.settings.web-allow-others=true
# 进行该配置，你就可以通过YOUR_URL/h2访问h2 web consloe。YOUR_URL是你程序的访问URl。
spring.h2.console.path=/h2
# 进行该配置，程序开启时就会启动h2 web consloe。当然这是默认的，如果你不想在启动程序时启动h2 web consloe，那么就设置为false。
spring.h2.console.enabled=true

# spring.resources.chain.strategy.content.enabled=true
# spring.resources.chain.strategy.content.paths=/**
